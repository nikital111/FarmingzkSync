/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Farming, FarmingInterface } from "../Farming";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_rewardsPerSec",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "recepient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    inputs: [],
    name: "accRewardsPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsPerSec",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "total",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateFarm",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016a2380380620016a2833981810160405281019062000037919062000298565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620000a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a09062000355565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200011b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000355565b60405180910390fd5b6000811162000161576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015890620003ed565b60405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000819055505050506200040f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022582620001f8565b9050919050565b620002378162000218565b81146200024357600080fd5b50565b60008151905062000257816200022c565b92915050565b6000819050919050565b62000272816200025d565b81146200027e57600080fd5b50565b600081519050620002928162000267565b92915050565b600080600060608486031215620002b457620002b3620001f3565b5b6000620002c48682870162000246565b9350506020620002d78682870162000246565b9250506040620002ea8682870162000281565b9150509250925092565b600082825260208201905092915050565b7f6164647265737320300000000000000000000000000000000000000000000000600082015250565b60006200033d600983620002f4565b91506200034a8262000305565b602082019050919050565b6000602082019050818103600083015262000370816200032e565b9050919050565b7f5f72657761726473506572536563206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b6000620003d5602583620002f4565b9150620003e28262000377565b604082019050919050565b600060208201905081810360008301526200040881620003c6565b9050919050565b611283806200041f6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80634e71d92d116100715780634e71d92d146101685780637cbaccd51461018657806391d23a1a146101a4578063b6b55f25146101c2578063d21220a7146101de578063f54ca63c146101fc576100a8565b8062893452146100ad5780630dfe1681146100cb5780631959a002146100e95780632ddbd13a1461011a57806331d7a26214610138575b600080fd5b6100b5610206565b6040516100c29190610bc0565b60405180910390f35b6100d361020c565b6040516100e09190610c1c565b60405180910390f35b61010360048036038101906100fe9190610c68565b610232565b604051610111929190610c95565b60405180910390f35b610122610256565b60405161012f9190610bc0565b60405180910390f35b610152600480360381019061014d9190610c68565b61025c565b60405161015f9190610bc0565b60405180910390f35b610170610361565b60405161017d9190610bc0565b60405180910390f35b61018e610609565b60405161019b9190610bc0565b60405180910390f35b6101ac61060f565b6040516101b99190610bc0565b60405180910390f35b6101dc60048036038101906101d79190610cea565b610615565b005b6101e661094d565b6040516101f39190610c1c565b60405180910390f35b610204610973565b005b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090508060000154908060010154905082565b60065481565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600060015490506000600254426102b79190610d46565b905060006102d060005483610a1e90919063ffffffff16565b90506103106103016006546102f364e8d4a5100085610a1e90919063ffffffff16565b610a9890919063ffffffff16565b84610af090919063ffffffff16565b9250610356846001015461034864e8d4a5100061033a878960000154610a1e90919063ffffffff16565b610a9890919063ffffffff16565b610b4e90919063ffffffff16565b945050505050919050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154116103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390610dd7565b60405180910390fd5b6103f4610973565b6000816000015490506000610445836001015461043764e8d4a510006104296001548860000154610a1e90919063ffffffff16565b610a9890919063ffffffff16565b610b4e90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104a4929190610df7565b6020604051808303816000875af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610e58565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610545929190610df7565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610e58565b50600083600001819055506105a882600654610b4e90919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff167f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef18383426040516105f893929190610e85565b60405180910390a280935050505090565b60015481565b60025481565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541461069f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069690610f08565b60405180910390fd5b6106a7610973565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107049190610c1c565b602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190610f3d565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016107a693929190610f6a565b6020604051808303816000875af11580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e99190610e58565b506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108479190610c1c565b602060405180830381865afa158015610864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108889190610f3d565b905061089d8282610b4e90919063ffffffff16565b93508383600001819055506108d464e8d4a510006108c660015487610a1e90919063ffffffff16565b610a9890919063ffffffff16565b83600101819055506108f184600654610af090919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15854260405161093f929190610c95565b60405180910390a250505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600254421115610a1c576000600654148061099057506000600254145b156109a15742600281905550610a1c565b6000600254426109b19190610d46565b905060006109ca60005483610a1e90919063ffffffff16565b9050610a0c6109fb6006546109ed64e8d4a5100085610a1e90919063ffffffff16565b610a9890919063ffffffff16565b600154610af090919063ffffffff16565b6001819055504260028190555050505b565b6000808303610a305760009050610a92565b60008284610a3e9190610fa1565b9050828482610a4d9190611012565b14610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a84906110b5565b60405180910390fd5b809150505b92915050565b6000808211610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad390611121565b60405180910390fd5b8183610ae89190611012565b905092915050565b6000808284610aff9190611141565b905083811015610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b906111c1565b60405180910390fd5b8091505092915050565b600082821115610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a9061122d565b60405180910390fd5b8183610b9f9190610d46565b905092915050565b6000819050919050565b610bba81610ba7565b82525050565b6000602082019050610bd56000830184610bb1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c0682610bdb565b9050919050565b610c1681610bfb565b82525050565b6000602082019050610c316000830184610c0d565b92915050565b600080fd5b610c4581610bfb565b8114610c5057600080fd5b50565b600081359050610c6281610c3c565b92915050565b600060208284031215610c7e57610c7d610c37565b5b6000610c8c84828501610c53565b91505092915050565b6000604082019050610caa6000830185610bb1565b610cb76020830184610bb1565b9392505050565b610cc781610ba7565b8114610cd257600080fd5b50565b600081359050610ce481610cbe565b92915050565b600060208284031215610d0057610cff610c37565b5b6000610d0e84828501610cd5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5182610ba7565b9150610d5c83610ba7565b9250828203905081811115610d7457610d73610d17565b5b92915050565b600082825260208201905092915050565b7f4e6f7468696e6720746f20636c61696d00000000000000000000000000000000600082015250565b6000610dc1601083610d7a565b9150610dcc82610d8b565b602082019050919050565b60006020820190508181036000830152610df081610db4565b9050919050565b6000604082019050610e0c6000830185610c0d565b610e196020830184610bb1565b9392505050565b60008115159050919050565b610e3581610e20565b8114610e4057600080fd5b50565b600081519050610e5281610e2c565b92915050565b600060208284031215610e6e57610e6d610c37565b5b6000610e7c84828501610e43565b91505092915050565b6000606082019050610e9a6000830186610bb1565b610ea76020830185610bb1565b610eb46040830184610bb1565b949350505050565b7f416c7265616479206465706f7369746564000000000000000000000000000000600082015250565b6000610ef2601183610d7a565b9150610efd82610ebc565b602082019050919050565b60006020820190508181036000830152610f2181610ee5565b9050919050565b600081519050610f3781610cbe565b92915050565b600060208284031215610f5357610f52610c37565b5b6000610f6184828501610f28565b91505092915050565b6000606082019050610f7f6000830186610c0d565b610f8c6020830185610c0d565b610f996040830184610bb1565b949350505050565b6000610fac82610ba7565b9150610fb783610ba7565b9250828202610fc581610ba7565b91508282048414831517610fdc57610fdb610d17565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101d82610ba7565b915061102883610ba7565b92508261103857611037610fe3565b5b828204905092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b600061109f602183610d7a565b91506110aa82611043565b604082019050919050565b600060208201905081810360008301526110ce81611092565b9050919050565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000600082015250565b600061110b601a83610d7a565b9150611116826110d5565b602082019050919050565b6000602082019050818103600083015261113a816110fe565b9050919050565b600061114c82610ba7565b915061115783610ba7565b925082820190508082111561116f5761116e610d17565b5b92915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b60006111ab601b83610d7a565b91506111b682611175565b602082019050919050565b600060208201905081810360008301526111da8161119e565b9050919050565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000600082015250565b6000611217601e83610d7a565b9150611222826111e1565b602082019050919050565b600060208201905081810360008301526112468161120a565b905091905056fea2646970667358221220b9e501d447f5301c57ebcaddf5f796920d63c6fd9abedfe3407acab9ab268f3264736f6c63430008120033";

type FarmingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FarmingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Farming__factory extends ContractFactory {
  constructor(...args: FarmingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    _rewardsPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Farming> {
    return super.deploy(
      _token0,
      _token1,
      _rewardsPerSec,
      overrides || {}
    ) as Promise<Farming>;
  }
  override getDeployTransaction(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    _rewardsPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token0,
      _token1,
      _rewardsPerSec,
      overrides || {}
    );
  }
  override attach(address: string): Farming {
    return super.attach(address) as Farming;
  }
  override connect(signer: Signer): Farming__factory {
    return super.connect(signer) as Farming__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FarmingInterface {
    return new utils.Interface(_abi) as FarmingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Farming {
    return new Contract(address, _abi, signerOrProvider) as Farming;
  }
}
